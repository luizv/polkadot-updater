###############################################################################
#  polkadot-updater.conf
#  --------------------------------------------------------------------------
#  All variables are OPTIONAL.  If you omit a line, the updater script falls
#  back to its built-in default.  Uncomment & edit only what you need.
###############################################################################

# --- Where to install / overwrite the Polkadot binaries  --------------------
#   This is the *target* directory -- i.e., where the validators expect
#   `polkadot`, `polkadot-execute-worker`, etc.
#   Default inside the script: /usr/local/bin
INSTALL_DIR=/usr/local/bin


# --- Where to store archived binaries before each upgrade  ------------------
#   Each run creates     $ARCHIVE_DIR/YYYYMMDD_<tag>/
#   Default: /opt/polkadot/archive
ARCHIVE_DIR=/opt/polkadot/archive


# --- Where to keep the tracking JSON  ---------------------------------------
#   Holds the last installed tag, version, and timestamps.
#   Must be writable by the user running the script (root if via systemd).
TRACKING_DIR=/var/lib/polkadot-updater


# --- Updater log file  ------------------------------------------------------
#   Every run appends to this file.
LOG_FILE=/var/log/polkadot-updater.log


# --- Systemd unit names to stop/start around the swap  ----------------------
#   List as a Bash array.  Adapt to your own naming convention.
#   Examples:
#     SERVICE_LIST=(validator@polkadot1 validator@kusama1)
#     SERVICE_LIST=(polkadot-service)
SERVICE_LIST=(validator@polkadot1 validator@kusama1)


# --- Parity release-signing GPG key  ----------------------------------------
#   The script imports / verifies with this key ID if not already present.
#   Default: 90BD75EBBB8E95CB3DA6078F94A4029AB4B35DAE
GPG_KEY=90BD75EBBB8E95CB3DA6078F94A4029AB4B35DAE


###############################################################################
#  Alerting
###############################################################################
# Set to "yes" to send alerts with AM. Anything else → alerting is skipped.
ENABLE_ALERTS=yes

# --- Alertmanager destinations  --------------------------------------------
#   Each line has a pair:  key=urls
#   ‘key’ must match whatever you pass as the first arg to open_update_alert /
#   error_alert etc.  Example below covers:
#     • a generic “server” scope
#     • a kusama1-specific scope
#   'urls' should have one or more alert manager destinations, and should be
#   separated by ";" .
#   Feel free to remove kusama1 entry if you only run one chain.
AM_URLS_RAW="
server=http://127.0.0.1:9090/api/v2/alerts;http://127.0.0.1:9091/api/v2/alerts
kusama1=http://127.0.0.1:9091/api/v2/alerts
"
